#!/bin/bash
function colorInfo(){
	colorStr=$1
	info=$2
	eval $(echo $1|awk -F "zi|di" '{print "zi="$1";di="$2}')
	ziColor=""
	diColor=""
	case $zi in
		"hei")
			ziColor="30m"  ;;
		"hong")
			ziColor="31m"	;;
		"lv")
			ziColor="32m"	;;
		"huang")
			ziColor="33m"	;;
		"lan")
			ziColor="34m"	;;
		"zi")
			ziColor="35m"	;;
		"tianlan")
			ziColor="36m"	;;
		"bai")
			ziColor="37m"	;;
		*)
			ziColor=""	;;
	esac 

	case $di in
		"hei")
			diColor="40;"  ;;
		"hong")
			diColor="41;"	;;
		"lv")
			diColor="42;"	;;
		"huang")
			diColor="43;"	;;
		"lan")
			diColor="44;"	;;
		"zi")
			diColor="45;"	;;
		"tianlan")
			diColor="46;"	;;
		"bai")
			diColor="47;"	;;
		*)
			diColor=""	;;
	esac 

	if [[ "$ziColor" == "" ]]
	then
		echo $info
		return 0
	fi
	
	str="\033["${diColor}""${ziColor}" "${info}" \033[0m"
	echo -e ${str}
}


function helpMeth(){
	case $1 in
		"private")
			colorInfo lvzi "help:"
			colorInfo lvzi "\th_cert private create (rsa|sm2) name [len]" 
			colorInfo lvzi "\th_cert private delpwd (rsa|sm2) name" 
			;;
		"cert")
			colorInfo lvzi "help:"
			colorInfo lvzi "\th_cert cert create [rsa|sm2] name"
			colorInfo lvzi "\th_cert cert p12 name password"
			;;
		"sign")
			colorInfo lvzi "help:"
			colorInfo lvzi "\th_cert sign"
			colorInfo lvzi "\th_cert sign [pem]"
			colorInfo lvzi "\th_cert sign [pem] [key]"
			colorInfo lvzi "\th_cert sign [pem] [key] [random]"
			;;
		*)
			helpMeth private
			helpMeth cert
			helpMeth sign
			;;
	esac
}

function privateMeth(){
	case $1 in
		"create")
			privateCreateMeth $2 $3 $4
			;;
		"delpwd")
			privateDelPwd $2 $3
			;;
		*)
			helpMeth private
			;;
	esac
}

function privateDelPwd(){
	type=$1
	name=$2
	if [[ "$type" == "rsa" ]]
	then
		koalopenssl rsa -in ${name} -out ${name}
	elif [[ "$type" == "sm2" ]]
	then
		koalopenssl ec -in ${name} -out ${name}
	else
		helpMeth private
	fi
}

function privateCreateMeth(){
	type=$1
	privateName=$2
	len=$3
	# 默认长度为1024
	if [[ "$len" == "" ]]
	then
		len=1024
	fi
	# 设置默认名称为private.key
	if [[ "$privateName" == "" ]]
	then
		privateName="private.key"
	fi
	
	# 是否带密码
	colorInfo lvzi "给私钥添加密码,直接回车则不需要密码"
	if [[ "$type" == "rsa" ]]
	then
		read PASSWORD
		if [[ "${PASSWORD}" == "" ]]
		then
			koalopenssl genrsa -out ${privateName} ${len}
		else
			koalopenssl genrsa -out ${privateName} -des3 -passout pass:${PASSWORD} ${len}
		fi
	elif [[ "$type" == "sm2" ]]
	then
		read PASSWORD
		if [[ "${PASSWORD}" == "" ]]	
		then
			koalopenssl ecparam -name CN-GM-ECC -genkey -out ${privateName} -noout
		else
			koalopenssl ecparam -name CN-GM-ECC -genkey -out ${privateName} -noout		
			koalopenssl ec -in ${privateName} -out ${privateName} -des -passout pass:${PASSWORD}
		fi
	else
		helpMeth private
	fi
			
}


function p12Meth(){
	name=$1
	password=$2
	if [[ "${name}" == "" ]]
	then
		colorInfo hongzi "请带上name"	
		exit -1
	fi
	keyFileName="${name}.key"	
	pemFileName="${name}.pem"
	p12FileName="${name}.pfx"
	echo ${name}
	if [[ ! -f "${keyFileName}" ]]
	then
		colorInfo hongzi "私钥不存在"
		exit -1
	fi
	if [[ ! -f "${pemFileName}" ]]
	then
		colorInfo hongzi "证书不存在"
		exit -1
	fi
	
	if [[ "${password}" == "" ]]
	then
		koalopenssl pkcs12 -export -inkey ${keyFileName} -in ${pemFileName} -nodes -out ${p12FileName} 
	else
		koalopenssl pkcs12 -export -inkey ${keyFileName} -in ${pemFileName} -passin pass:${password} -out ${p12FileName} 
	fi
	
}

function certMeth(){
	case $1 in
		"create")
			certCreateMeth $2 $3
			;;
		"p12")
			p12Meth $2 $3
			;;
		*)
			helpMeth cert
			;;
	esac
}

function certCreateMeth(){
	type=$1
	name=$2
	if [[ ("${type}" != "rsa" && "${type}" != "sm2") || "${name}" == "" ]]
	then
		helpMeth cert
		exit -1
	fi
	colorInfo lvzi "请输入CN(通用名称,你的姓名或者唯一标识)项"
	CN_STR=$(buildReq)
	colorInfo lvzi "请输入C(国家简称,eg:CN)项"
	C_STR=$(buildReq)
	colorInfo lvzi "请输入ST(省市名,eg:SH)项"
	ST_STR=$(buildReq)
	colorInfo lvzi "请输入L(城市,eg:上海)项"
	L_STR=$(buildReq)
	colorInfo lvzi "请输入O(组织)项"
	O_STR=$(buildReq)
	colorInfo lvzi "请输入OU(部门)项"
	OU_STR=$(buildReq)
	colorInfo lvzi "请输入emailAddress(邮箱)项"
	EM_STR=$(buildReq)
	colorInfo lvzi "请输入GN项"
	GN_STR=$(buildReqCanNull)

	req="[ req ]\n"$(keyValueEcho distinguished_name req_distinguished_name)"\n"$(keyValueEcho prompt no)
	v3Req=""
	colorInfo lvzi "是否需要添加X509v3扩展项(y/N)"
	read ADD_V
	while [[ "${ADD_V^^}" != "Y" && "${ADD_V^^}" != "N" && "${ADD_V}" != "" ]]
	do
		read ADD_V
	done
	
	if [[ "${ADD_V^^}" == "Y" ]]
	then
		req=${req}"\n"$(keyValueEcho req_extensions v3_req)
		colorInfo lvzi "该证书是否为CA(y/N)"
		read CA_FLAG
		while [[ "${CA_FLAG^^}" != "Y" && "${CA_FLAG^^}" != "N" && "${CA_FLAG}" != "" ]]
		do
			read CA_FLAG
		done
		v3Req="\n[ v3_req ]"
		caKeyUsageStr=''
		if [[ "${CA_FLAG^^}" == "Y" ]]
		then
			v3Req=${v3Req}"\n"$(keyValueEcho basicConstraints CA:TRUE)
			caKeyUsageStr="cRLSign, keyCertSign,"
		else
			v3Req=${v3Req}"\n"$(keyValueEcho basicConstraints CA:FALSE)
		fi
		colorInfo lvzi "请选择证书用途,输入序列号,逗号隔开(1.数字签名 2.不可否认性 3.key加密 4.数据加密),不添加直接回车跳过"
		read KEY_USAGE_STR
		KEY_USAGE_STR=$(echo ${KEY_USAGE_STR}|sed 's/ //g')
		if [[ "${KEY_USAGE_STR}" != "" ]]
		then
			KEY_USAGE_VALUE="${caKeyUsageStr}"
			OLD_IFS="${IFS}"	
			IFS=","	
			arr=(${KEY_USAGE_STR})
			IFS=${OLD_IFS}
			for s in ${arr[@]}
			do
				case $s in
					"1")
						KEY_USAGE_VALUE=${KEY_USAGE_VALUE}" digitalSignature,"
						;;
					"2")
						KEY_USAGE_VALUE=${KEY_USAGE_VALUE}" nonRepudiation,"
						;;
					"3")
						KEY_USAGE_VALUE=${KEY_USAGE_VALUE}" keyEncipherment,"
						;;
					"4")
						KEY_USAGE_VALUE=${KEY_USAGE_VALUE}" dataEncipherment,"
						;;
					*)
						
						;;
				esac
			done
			KEY_USAGE_VALUE=${KEY_USAGE_VALUE%,*}
			v3Req=${v3Req}"\n"$(keyValueEcho keyUsage "${KEY_USAGE_VALUE}")
		fi
		colorInfo lvzi "请添加扩展证书添加则以逗号隔开(1.服务器身份验证2.客户端身份验证3.代码签名4.安全电子邮件5.时间戳),不添加直接回车跳过"
		read EXTENDED_KEY_USAGE_STR
		EXTENDED_KEY_USAGE_STR=$(echo ${EXTENDED_KEY_USAGE_STR}|sed 's/ //g')
		if [[ ${EXTENDED_KEY_USAGE_STR} != "" ]]
		then
			EXTENDED_KEY_USAGE_VALUE=""
			OLD_IFS="${IFS}"	
			IFS=","	
			arr=(${EXTENDED_KEY_USAGE_STR})
			IFS=${OLD_IFS}
			for s in ${arr[@]}
			do
				case $s in
					"1")
						EXTENDED_KEY_USAGE_VALUE=${EXTENDED_KEY_USAGE_VALUE}"serverAuth,"
						;;
					"2")
						EXTENDED_KEY_USAGE_VALUE=${EXTENDED_KEY_USAGE_VALUE}"clientAuth,"
						;;
					"3")
						EXTENDED_KEY_USAGE_VALUE=${EXTENDED_KEY_USAGE_VALUE}"codeSigning,"
						;;
					"4")
						EXTENDED_KEY_USAGE_VALUE=${EXTENDED_KEY_USAGE_VALUE}"emailProtection,"
						;;
					"5")
						EXTENDED_KEY_USAGE_VALUE=${EXTENDED_KEY_USAGE_VALUE}"timeStamping,"
						;;
					*)
						;;
				esac
						
			done
			EXTENDED_KEY_USAGE_VALUE=${EXTENDED_KEY_USAGE_VALUE%,*}
			v3Req=${v3Req}"\n"$(keyValueEcho extendedKeyUsage ${EXTENDED_KEY_USAGE_VALUE})
		fi
		
	fi
	req=${req}"\n\n[ req_distinguished_name ]\n"$(keyValueEcho CN ${CN_STR})"\n"$(keyValueEcho C ${C_STR})"\n"$(keyValueEcho ST ${ST_STR})"\n"$(keyValueEcho L ${L_STR})"\n"$(keyValueEcho O ${O_STR})"\n"$(keyValueEcho OU ${OU_STR})"\n"$(keyValueEcho emailAddress ${EM_STR})"\n"$(keyValueEcho GN ${GN_STR})
	req=${req}"\n"${v3Req}
	colorInfo lvzi "请输入其他oid扩展项,使用逗号分隔,如：1.2.3=test,1.3.4=test1,不添加直接回车跳过"
	read OID_EXT
	if [[ "${OID_EXT}" != "" ]]
	then
		EXTENDED_KEY_USAGE_VALUE=""
		OLD_IFS="${IFS}"
		IFS=","
		arr=(${OID_EXT})
		IFS=${OLD_IFS}
		for d in ${arr[@]}
		do
			req=${req}"\n"$(echo "${d}" | sed "s/=/ = ASN1:UTF8String:/g")
		done
	fi
	reqFileNamePre=$(koalopenssl rand -base64 16|sed 's/\///g')
	reqConfFileName="/tmp/"${reqFileNamePre}".cnf"
	reqFileName="/tmp/"${reqFileNamePre}".req"
	echo -e ${req} > ${reqConfFileName}
	colorInfo lvzi "填写私钥路径,若没有直接回车"
	read PRIVATE_PATH
	if [[ "${PRIVATE_PATH}" == "" ]]
	then
		colorInfo lvzi "------正在创建私钥------"
		privateCreateMeth $type	${name}".key"
		PRIVATE_PATH=${name}".key"
		colorInfo lvzi "------创建私钥成功,文件名为${name}.key------"
	else 
		ls ${PRIVATE_PATH}
		successAccess="$?"
		while [[ "${successAccess}" != "0" ]]
		do
			colorInfo hongzi "私钥不存在,请重新输入私钥路径"
			read PRIVATE_PATH
			if [[ "${PRIVATE_PATH}" == "" ]]
			then
				colorInfo lvzi "------正在创建私钥------"
				privateCreateMeth $type	${name}".key"
				PRIVATE_PATH=${name}".key"
				colorInfo lvzi "------创建私钥成功,文件名为${name}.key------"
				sucessAccess="0"
		
			else 
				echo ${PRIVATE_PATH}
				ls ${PRIVATE_PATH}
				successAccess="$?"
			fi
				
			
		done
	fi
	
	colorInfo lvzi "请输入私钥密码,若没有则直接回车"
	read PRIVATE_PASSWD
	if [[ "${PRIVATE_PASSWD}" == "" ]]
	then
		koalopenssl req -key ${PRIVATE_PATH} -new -config ${reqConfFileName} -out ${reqFileName} -utf8
	else
		koalopenssl req -key ${PRIVATE_PATH} -passin pass:${PRIVATE_PASSWD} -new -config ${reqConfFileName} -out ${reqFileName} -utf8
	fi


	colorInfo lvzi "是否自签发(Y/n)"
	read SELF_CA
	while [[ "${SELF_CA^^}" != "Y" && "${SELF_CA^^}" != "N" && "${SELF_CA}" != "" ]]
	do
		read SELF_CA
	done
	v3ReqStr=""
	if [[ "${ADD_V^^}" == "Y" ]]
	then
		v3ReqStr=" -extensions v3_req "
	fi
	colorInfo lvzi "请输入证书有效期(天)"
	read CERT_DAYS
	certDays=""
	if [[ "${CERT_DAYS}" != "" ]]
	then
		certDays=" -days ${CERT_DAYS}"
	fi
	if [[ "${SELF_CA^^}" == "N" ]]
	then
		colorInfo lvzi "请输入CA证书路径"
		read CA_PEM_PATH
		while [[ "${CA_PEM_PATH}" == "" ]]
		do
			read CA_PEM_PATH
		done
		colorInfo lvzi "请输入CA私钥路径"
		read CA_KEY_PATH
		while [[ "${CA_KEY_PATH}" == "" ]]
		do
			read CA_KEY_PATH
		done
		colorInfo lvzi "请输入CA私钥密码"
		read CA_PASSWORD
		if [[ "${CA_PASSWORD}" == "" ]]	
		then 
			koalopenssl x509 -req -extfile ${reqConfFileName} ${v3ReqStr} -in ${reqFileName} -CA ${CA_PEM_PATH} -CAkey ${CA_KEY_PATH} -out ${name}".pem" -CAcreateserial ${certDays}
			p12Meth ${name} ${PRIVATE_PASSWD}
		else
			koalopenssl x509 -req -extfile ${reqConfFileName} ${v3ReqStr} -in ${reqFileName} -CA ${CA_PEM_PATH} -CAkey ${CA_KEY_PATH} -out ${name}".pem" -passin pass:${CA_PASSWORD} -CAcreateserial ${certDays}
			p12Meth ${name} ${PRIVATE_PASSWD}
		fi
	
	else
		if [[ "${PRIVATE_PASSWD}" == "" ]]
		then
			koalopenssl x509 -req -extfile ${reqConfFileName} ${v3ReqStr} -in ${reqFileName} -signkey ${PRIVATE_PATH} -out ${name}".pem" ${certDays}
			p12Meth ${name} ${PRIVATE_PASSWD}
		else
			koalopenssl x509 -req -extfile ${reqConfFileName} ${v3ReqStr} -in ${reqFileName} -signkey ${PRIVATE_PATH} -out ${name}".pem" -passin pass:${PRIVATE_PASSWD} ${certDays}
			p12Meth ${name} ${PRIVATE_PASSWD}
		fi
	fi
	rm -f ${reqConfFileName}
	rm -f ${reqFileName}
		
	if [[ "$type" == "rsa" ]]	
	then
		echo "rsa"
	elif [[ "$type" == "sm2" ]]
	then
		echo "sm2"
	else
		helpMeth cert
	fi
}

function buildReq(){
	read ITEM_STR
	while [[ "${ITEM_STR}" == ""  ]]
	do
		read ITEM_STR
	done
	echo ${ITEM_STR}
}

function buildReqCanNull(){
	read ITEM_STR
	if [[ "${ITEM_STR}" == ""  ]]
	then
		ITEM_STR="kl_null"
	fi
	echo ${ITEM_STR}
}

function keyValueEcho(){
	key=$1
	value=$2
        if [[ "$value" == "kl_null" ]]
	then
		echo ""
	else
		echo "${key}\r\t\t\t\t\t\t=\t${value}"
	fi
}

function sign(){
	if [ "$1" == ""  ]
	then
		colorInfo lvzi "请输入证书路径"
		hasExistPem=false
		while [ !${hasExistPem} ]
		do
			read PEM_PATH
			if [[ "${PEM_PATH}" == "" ]]
			then
				colorInfo hongzi "请输入证书路径"
			elif [[ ! -f "${PEM_PATH}" ]]
			then
				colorInfo hongzi "证书不存在,请重新输入证书路径"
			else
				break
			fi
		done	
	else
		PEM_PATH=$1
		if [[ ! -f "${PEM_PATH}" ]]
		then
			colorInfo hongzi "证书不存在,请重新输入证书路径"
		fi
	fi
	if [ "$2" == "" ]
	then
		colorInfo lvzi "请输入私钥路径"
		hasExistKey=false
		while [[ !${hasExistKey} ]]
		do
			read KEY_PATH
			if [[ "${KEY_PATH}" == "" ]]
			then
				colorInfo hongzi "请输入私钥路径"
			elif [[ ! -f "${KEY_PATH}"  ]]
			then
				colorInfo hongzi "私钥不存在,请重新输入私钥路径"
			else
				break
			fi
		done	
	else
		KEY_PATH=$2
	fi
	if [ "$3" == "" ]
	then
		colorInfo lvzi "请输入待签名数据"
		read SIGN_TEXT
		while [[ "${SIGN_TEXT}" == "" ]]
		do
			read SIGN_TEXT
		done
	else
		SIGN_TEXT=$3
	fi
	# 将签名数据写入文件
        signFileNamePre=$(koalopenssl rand -base64 16|sed 's/\///g')
        signFileName="/tmp/"${signFileNamePre}".txt"
        echo -e ${SIGN_TEXT} > ${signFileName}
        signResFileNamePre=$(koalopenssl rand -base64 16|sed 's/\///g')
        signResFileName="/tmp/"${signResFileNamePre}".sig"
	koalopenssl smime -sign -in ${signFileName} -signer ${PEM_PATH} -inkey ${KEY_PATH}  -out ${signResFileName} -nodetach -md sha1
	sed -n '6,$p' ${signResFileName}|sed ':a;N;$!ba;s/\n//g'
	rm -rf ${signFileName}
	rm -rf ${signResFileName}
}

case $1 in
	"private")
		privateMeth $2 $3 $4 $5	;;
	"cert")
		certMeth $2 $3 $4 	;;
	"sign")
		sign $2 $3 $4		;;
	"help")
		helpMeth $2		;;
	*)
		helpMeth		;;

esac

